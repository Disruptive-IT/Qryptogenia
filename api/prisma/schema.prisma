generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  profile_picture String?
  username        String
  email           String    @unique @db.VarChar(255)
  password        String?
  createdAt        DateTime  @default(now()) @db.Timestamp(0)
  update_date     DateTime?
  state           Boolean   @default(true)

  rol        Rol         @relation(fields: [rolId], references: [id])
  rolId      Int
  Qr         Qr[]
  Membership Membership?
  LoginLogs  LoginLogs?
}

enum roles {
  ADMIN
  CLIENT
}

//! Para el alcance
model Rol {
  id            Int             @id @default(autoincrement())
  name          roles
  state         Boolean         @default(true)
  createdAt     DateTime
  update_date   DateTime?
  RolPermission RolPermission[]
  User          User[]
}

model Membership {
  id                 String               @id @default(uuid())
  name               String
  description        String
  duration_time      DateTime
  state              Boolean              @default(true)
  createdAt          DateTime
  update_date        DateTime?
  user               User                 @relation(fields: [userId], references: [id])
  userId             String               @unique
  MembershipBenefits MembershipBenefits[]
}

// ! Capchat por intentos fallidos
// ! Check box para terminos y condiciones
model LoginLogs {
  id                String    @id @default(uuid())
  failed_login      Int?      @default(0)
  failed_login_time DateTime?
  created_ip        String
  update_ip         String?
  login_date        DateTime?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String    @unique
}

model PreRegister {
  id                    String   @id @default(uuid())
  email                 String   @unique @db.VarChar(255)
  createdAt             DateTime
  last_pin_generated_at DateTime?
  pin                   Int
}

model RolPermission {
  id    Int      @id @default(autoincrement())
  useAt DateTime

  rolId        Int
  rol          Rol        @relation(fields: [rolId], references: [id])
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([rolId, permissionId], map: "id_rol_permission")
}

model Permission {
  id            Int             @id @default(autoincrement())
  description   String
  state         Boolean         @default(true)
  createdAt     DateTime
  update_date   DateTime?
  RolPermission RolPermission[]
}

model MembershipBenefits {
  id          String   @id @default(uuid())
  createdAt   DateTime
  update_date DateTime?

  membershipId String
  membership   Membership @relation(fields: [membershipId], references: [id])
  benefitsId   String
  benefits     Benefits   @relation(fields: [benefitsId], references: [id])

  @@unique([membershipId, benefitsId], map: "id_membership_benefits")
}

model Benefits {
  id                 String               @id @default(uuid())
  name               String
  description        String
  createdAt          DateTime
  update_date        DateTime?
  MembershipBenefits MembershipBenefits[]
}

model Qr {
  id          String   @id @default(uuid())
  description String
  qr          String
  state       Boolean  @default(true)
  createdAt   DateTime
  update_date DateTime?

  user   User    @relation(fields: [userId], references: [id])
  userId String
  QrType QrType?

  // New relations
  QrPreview QrPreview @relation(fields: [qrPreviewId], references: [id])
  qrPreviewId String @unique
  QrText QrText @relation(fields: [qrTextId], references: [id])
  qrTextId String @unique
  QrDesign QrDesign @relation(fields: [qrDesignId], references: [id])
  qrDesignId String @unique
  QrLogo QrLogo @relation(fields: [qrLogoId], references: [id])
  qrLogoId String @unique
}

model QrType {
  id          String   @id @default(uuid())
  description String
  state       Boolean  @default(true)
  createdAt   DateTime
  update_date DateTime?

  qr   Qr     @relation(fields: [qrId], references: [id])
  qrId String @unique
}


model QrPreview{
  id String @id @default(uuid())
  title String
  colorTitle String
  description String
  descriptionColor String
  boxColor String
  borderImg String
  imgBoxBackgroud String?
  backgroudColor String
  SelectOptions Json

  // New relation
  Qr Qr?
}


model QrText{
  id String @id @default(uuid())
  text String
  positionX Int
  positionY Int
  colorText String
  fontSize Int

  // New relations
  Qr Qr?
  QrTextFont QrTextFont @relation(fields: [qrTextFontId], references: [id])
  qrTextFontId String
  QrTextBubble QrTextBubble @relation(fields: [qrTextBubbleId], references: [id])
  qrTextBubbleId String
}

model QrTextFont{
  id String @id @default(uuid())
  fontFamily String

  // New relation
  QrText QrText[]
}

model QrTextBubble{
  id String @id @default(uuid())
  burbble String
  color String

  // New relation
  QrText QrText[]
}

model QrDesign{
  id String @id @default(uuid())
  frame String
  frameColor String
  dots String
  dotsColor String
  cornerSquare String
  cornerSquareColor String
  cornerDot String
  cornerDotColor String

  // New relation
  Qr Qr?
}

model QrLogo{
  id String @id @default(uuid())
  logo String
  size Int

  // New relation
  Qr Qr?
}

