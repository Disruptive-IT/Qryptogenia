generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  profile_picture String?
  username        String
  email           String    @unique @db.VarChar(255)
  password        String
  createdAt       DateTime  @default(now())
  update_date     DateTime? @updatedAt
  state           Boolean   @default(true)

  rol        Rol         @relation(fields: [rolId], references: [id])
  rolId      Int
  Qr         Qr[]
  Membership Membership?
  LoginLogs  LoginLogs?
}

enum roles {
  ADMIN
  CLIENT
}

//! Para el alcance
model Rol {
  id            Int             @id @default(autoincrement())
  name          roles
  state         Boolean         @default(true)
  createdAt     DateTime        @default(now())
  update_date   DateTime        @updatedAt
  RolPermission RolPermission[]
  User          User[]
}

model Membership {
  id                 String               @id @default(uuid())
  name               String
  description        String
  duration_time      DateTime
  state              Boolean              @default(true)
  createdAt          DateTime             @default(now())
  update_date        DateTime             @updatedAt
  user               User                 @relation(fields: [userId], references: [id])
  userId             String               @unique
  MembershipBenefits MembershipBenefits[]
}

// ! Capchat por intentos fallidos
// ! Check box para terminos y condiciones
model LoginLogs {
  id                String    @id @default(uuid())
  failed_login      Int?      @default(0)
  failed_login_time DateTime?
  created_ip        String
  update_ip         String?
  login_date        DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String    @unique
}

model PreRegister {
  id                      String   @id @default(uuid())
  email                   String   @unique @db.VarChar(255)
  createdAt               DateTime @default(now())
  last_token_generated_at DateTime @updatedAt
  pin                     Int
}

model RolPermission {
  id    Int      @id @default(autoincrement())
  useAt DateTime @default(now())

  rolId        Int
  rol          Rol        @relation(fields: [rolId], references: [id])
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([rolId, permissionId], map: "id_rol_permission")
}

model Permission {
  id            Int             @id @default(autoincrement())
  description   String
  state         Boolean         @default(true)
  createdAt     DateTime        @default(now())
  update_date   DateTime        @updatedAt
  RolPermission RolPermission[]
}

model MembershipBenefits {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  update_date DateTime @updatedAt

  membershipId String
  membership   Membership @relation(fields: [membershipId], references: [id])
  benefitsId   String
  benefits     Benefits   @relation(fields: [benefitsId], references: [id])

  @@unique([membershipId, benefitsId], map: "id_membership_benefits")
}

model Benefits {
  id                 String               @id @default(uuid())
  name               String
  description        String
  createdAt          DateTime             @default(now())
  update_date        DateTime             @updatedAt
  MembershipBenefits MembershipBenefits[]
}

model Qr {
  id          String   @id @default(uuid())
  description String
  qr          String
  state       Boolean  @default(true)
  createdAt   DateTime @default(now())
  update_date DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id])
  userId String
  QrType QrType?
}

model QrType {
  id          String   @id @default(uuid())
  description String
  state       Boolean  @default(true)
  createdAt   DateTime @default(now())
  update_date DateTime @updatedAt

  qr   Qr     @relation(fields: [qrId], references: [id])
  qrId String @unique
}
